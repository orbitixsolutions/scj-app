generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum RolesEnum {
    DIRECTIVE
    ADMIN
    TEACHER
    STUDENT
    DEVELOPER
}

enum DayEnum {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
    NONE
}

enum StatusEnum {
    ATTENDED
    ATTENDED_EXCUSED
    NOT_ATTENDED
    NOT_DETERMINED
}

model User {
    id               String    @id @default(uuid())
    name             String
    lastName         String
    password         String
    email            String    @unique
    documentIdentity String
    role             RolesEnum
    description      String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    workshops Workshops[]
}

model Students {
    id               String   @id @unique @default(uuid())
    name             String
    lastName         String
    studyYear        String
    institute        String
    documentIdentity String
    dateOfBirth      DateTime
    photo            String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    workshopsId String?
    workshops   Workshops? @relation(fields: [workshopsId], references: [id], onDelete: Cascade)

    Assistences Assistences[]
}

model Workshops {
    id          String   @id @default(uuid())
    name        String
    days        String[]
    description String
    photo       String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    teacher   User   @relation(fields: [teacherId], references: [id], onDelete: Cascade)
    teacherId String

    students    Students[]
    assistences Assistences[]
}

model Assistences {
    id         String @id @default(uuid())
    studentId  String
    workshopId String

    asistanceDate DateTime
    status        StatusEnum @default(NOT_ATTENDED)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    student  Students  @relation(fields: [studentId], references: [id], onDelete: Cascade)
    workshop Workshops @relation(fields: [workshopId], references: [id], onDelete: Cascade)

    @@index([studentId, workshopId])
}
